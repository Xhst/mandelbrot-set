(()=>{"use strict";var e={680:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r="// Define the maximum number of iterations for the Mandelbrot set calculation\r\n// the value between the @ is replaced with the actual value during compilation,\r\n// which can be set by the user in the application, that's because OpenGL doesn't support dynamic loops\r\nconst int MAX_ITERATIONS = @MAX_ITERATIONS@;\r\n\r\n// Set the precision for floating-point operations\r\nprecision mediump float;\r\n\r\n// Uniform variables representing the resolution of the screen,\r\n// scaling factor, and center position of the Mandelbrot set\r\nuniform vec2 resolution;\r\nuniform float scale;\r\nuniform vec2 center;\r\n\r\nvoid main() {\r\n    // Calculate the position of the current pixel in the complex plane\r\n    vec2 position = (gl_FragCoord.xy - resolution / 2.0) / scale + center;\r\n    \r\n    // Initialize the complex number z to (0, 0)\r\n    vec2 z = vec2(0.0, 0.0);\r\n    \r\n    // Initialize the iteration count to 0\r\n    int iterations = 0;\r\n    \r\n    // Iterate to determine whether the current pixel is in the Mandelbrot set\r\n    for (int i = 0; i < MAX_ITERATIONS; i++) {\r\n        // Check if the magnitude of z exceeds 2, indicating it's not in the set\r\n        if (length(z) > 2.0) {\r\n            // Exit the loop if the escape condition is met\r\n            break;\r\n        }\r\n            \r\n        // Calculate the next iteration of z using the Mandelbrot formula\r\n        vec2 newZ = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + position;\r\n        \r\n        // Update the value of z for the next iteration\r\n        z = newZ;\r\n        \r\n        // Increment the iteration count\r\n        iterations++;\r\n    }\r\n    \r\n    // Calculate the color based on the number of iterations\r\n    float color = float(iterations) / float(MAX_ITERATIONS);\r\n    \r\n    // Output the final color for the current pixel\r\n    gl_FragColor = vec4(color, color, color, 1.0);\r\n}\r\n"},450:(e,t,n)=>{n.r(t),n.d(t,{default:()=>r});const r="// Define the attribute for the position of the vertex\r\nattribute vec2 position;\r\n\r\nvoid main() {\r\n    // Set the position of the vertex in clip space\r\n    gl_Position = vec4(position, 0, 1);\r\n}"},253:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(450)),i=r(n(680));function a(e,t,n){const r=e.createShader(t);return e.shaderSource(r,n),e.compileShader(r),r}function c(e,t,n=100){let r=function(e,t){let n=a(e,e.VERTEX_SHADER,o.default),r=a(e,e.FRAGMENT_SHADER,i.default.replace("@MAX_ITERATIONS@",String(t)));const c=e.createProgram();return e.attachShader(c,n),e.attachShader(c,r),e.linkProgram(c),e.useProgram(c),c}(t,n);!function(e,t){const n=e.getAttribLocation(t,"position"),r=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(n),e.vertexAttribPointer(n,2,e.FLOAT,!1,0,0)}(t,r);let{scaleUniformLocation:s,centerUniformLocation:l,params:u}=function(e,t,n){const r={x:-.5,y:0,z:1},o=e.getUniformLocation(t,"resolution");e.uniform2f(o,n.width,n.height);const i=e.getUniformLocation(t,"scale");e.uniform1f(i,n.width/(2*Math.exp(r.z)));const a=e.getUniformLocation(t,"center");return e.uniform2f(a,r.x,r.y),{scaleUniformLocation:i,centerUniformLocation:a,params:r}}(t,r,e);!function(e,t,n,r,o){document.getElementById("max-iterations-btn").addEventListener("click",(()=>{const n=parseInt(document.getElementById("max-iterations").value);console.log("Drawing Mandelbrot set with max iterations:",n),c(t,e,n)})),window.addEventListener("keydown",(i=>{if(["ArrowUp","ArrowDown","ArrowLeft","ArrowRight"].includes(i.key)||["w","a","s","d"].includes(i.key)||["z","x"].includes(i.key)){i.preventDefault();const a=.01;switch(i.key){case"ArrowUp":case"w":o.y+=a;break;case"ArrowDown":case"s":o.y-=a;break;case"ArrowLeft":case"a":o.x-=a;break;case"ArrowRight":case"d":o.x+=a;break;case"z":o.z+=a;break;case"x":o.z-=a}e.uniform1f(n,t.width/(2*Math.exp(o.z))),e.uniform2f(r,o.x,o.y),e.drawArrays(e.TRIANGLE_STRIP,0,4)}}))}(t,e,s,l,u),t.drawArrays(t.TRIANGLE_STRIP,0,4)}!function(){const e=function(){const e=document.createElement("canvas");return document.body.appendChild(e),e.width=window.innerWidth,e.height=window.innerHeight,e}(),t=e.getContext("webgl");if(!t)throw new Error("WebGL not supported");c(e,t)}()}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(253)})();